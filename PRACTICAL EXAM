// INTERFACE RUNNER

public interface Runner{

public void run(); 
}

// SUPERCLASS CANDIDATE

abstract class Candidate{

String name; 
int age; 
String type;

public  Candidate(String name, int age, String type){
this.name = name; 
this.age = age; 
this.type = type; 
}

public Candidate(){
String name = "";
int age; 
String type; 
}

public String getName(){
return name; 
}

public int getAge(){
return age; 
}

public String getType(){
return type; 
}

public abstract void standingcandidate(); 

public void run(){
System.out.println(); 
System.out.println("Candidate running in various positions: "); 
}
}

// SUBCLASS MACHINE

public class Machine extends Candidate implements Runner{

public Machine(String name, int age, String type){
super(name, age, type); 
}

@Override 
public String getName(){
return name; 
}
@Override
public int getAge(){
return age; 
}

@Override
public String getType(){
return type; 
}

@Override
public void standingcandidate(){
System.out.println(); 
System.out.println("Candidate info: "); 
System.out.println("Name: "+getName()); 
System.out.println("Age: "+getAge());
System.out.println("Type: "+getType());  
}

public void run(){
System.out.println("Candidate will run in the machine position"); 
}



}


// SUBLCASS ATHLETE

public class Athlete extends Candidate implements Runner{

public Athlete(String name, int age, String type){
super(name, age, type); 
}

@Override 
public String getName(){
return name; 
}
@Override
public int getAge(){
return age; 
}

@Override
public String getType(){
return type; 
}

@Override
public void standingcandidate(){
System.out.println(); 
System.out.println("Candidate info: "); 
System.out.println("Name: "+getName()); 
System.out.println("Age: "+getAge());
System.out.println("Type: "+getType());  
}

@Override
public void run(){
System.out.println("Candidate will run in the Athlete position"); 
}

}

// SUBCLASS POLITICAL CANDIDATE

public class PoliticalCandidate extends Candidate implements Runner{

public PoliticalCandidate(String name, int age, String type){
super(name, age, type); 
}

@Override 
public String getName(){
return name; 
}
@Override
public int getAge(){
return age; 
}

@Override
public String getType(){
return type; 
}

@Override
public void standingcandidate(){
System.out.println(); 
System.out.println("Candidate info: "); 
System.out.println("Name: "+getName()); 
System.out.println("Age: "+getAge());
System.out.println("Type: "+getType());  
}
@Override
public void run(){
System.out.println("Candidate will run as a political candidate position"); 
}



}

// SUBCLASS DEMO RUNNERS

  import java.util.*; 
public class DemoRunners{

public static void main(String[]args){

Scanner input = new Scanner(System.in); 

System.out.print("Enter name: "); 
String name = input.next(); 

System.out.print("Enter age: ");
int age = input.nextInt(); 

System.out.print("Enter type of position you will run: "); 
String type = input.next(); 


if(type.equals("machine")||type.equals("MACHINE")){
Machine M = new Machine(name, age, type); 
M.standingcandidate(); 
M.run(); 
}
else if(type.equals("ATHLETE")||type.equals("athlete")){
Athlete A = new Athlete(name, age, type); 
A.standingcandidate();
A.run(); 
}

else if(type.equals("POLITICALCANDIDATE")||type.equals("politicalcandidate")){
PoliticalCandidate PC = new PoliticalCandidate(name, age, type); 
PC.standingcandidate();
PC.run(); 
}
else{
System.out.println("Invalid input"); 
}
}

}
