public class QueueNode{
   QueueNode previous;
   int info;
   QueueNode next;
   
   public QueueNode(QueueNode previous, int info, QueueNode next){
      this.previous = previous;
      this.info = info;
      this.next = next;
   }
}


public class QueueClass{
   QueueNode front;
   QueueNode rear;
   
   //CONSTRUCTOR
   public QueueClass(){
      front = null;
      rear = null;
   }
   
   public QueueClass(QueueNode front, QueueNode rear){
      this.front = front;
      this.rear = rear;
   }
   
   public boolean isEmpty(){
      if(front==null && rear==null)
         return true;
      else
         return false;
   }
   
   // ENQUEUE METHOD
   public void enqueue(int info){
      QueueNode newNode = new QueueNode(null, info, null);
      if (isEmpty()) {
         front = newNode;
         rear = newNode;
      } 
      else {
         rear.next = newNode;
         newNode.previous = rear;
         rear = newNode;
      }
      System.out.println("Enqueued: " + info);
   }
   
   // DEQUEUE METHOD
   public int dequeue(){
      if (isEmpty()) {
         System.out.println("Queue is empty.");
         return -1;
      }
      int dequeuedValue = front.info;
      front = front.next;
      if (front == null) {
         rear = null;
      }
      
      System.out.println("Dequeued: " + dequeuedValue);
      return dequeuedValue;
   }
   
   // FRONT METHOD
   public void front(){
      if (isEmpty()) {
         System.out.println("Queue is empty.");
      } 
      else {
         System.out.println("Front element: " + front.info);
      }
   }
   
   // REAR METHOD
   public void rear(){
      if (isEmpty()) {
         System.out.println("Queue is empty.");
      } 
      else {
         System.out.println("Rear element: " + rear.info);
      }
   }
   
   // PRINT METHOD
   public void print(){
      if (isEmpty()) {
         System.out.println("Queue is empty.");
      } 
      else {
         QueueNode current = front;
         System.out.print("Queue: ");
         while (current != null) {
            System.out.print(current.info + " ");
            current = current.next;
         }
         System.out.println();
      }
    }
   
}


import java.util.Scanner;

public class TestQueue{
   public static void main(String[] args){
      QueueClass queue = new QueueClass();
      Scanner scanner = new Scanner(System.in);
      
      while (true) {
         System.out.println("\n1. Enqueue");
         System.out.println("2. Dequeue");
         System.out.println("3. Print Front");
         System.out.println("4. Print Rear");
         System.out.println("5. Print Queue");
         System.out.println("6. Exit");
         System.out.print("Enter your choice: ");
          
         int choice = scanner.nextInt();
         switch (choice) {
            case 1:
               System.out.print("Enter element to enqueue: ");
               int enqueueValue = scanner.nextInt();
               queue.enqueue(enqueueValue);
               break;
            case 2:
               queue.dequeue();
               break;
            case 3:
               queue.front();
               break;
            case 4:
               queue.rear();
               break;
            case 5:
               queue.print();
               break;
            case 6:
               System.out.println("Exiting...");
               System.exit(0);
               break;
            default:
               System.out.println("Invalid");
         }
      }
   }
}
